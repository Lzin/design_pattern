原型模式的基本介绍:
1.原型模式(Prototype)是指: 采用原型实例指定创建对象的种类，并且通过拷贝这些模型，创建新的对象

2.原型模式是一种创建型的设计模式，允许一个对象创建一个可定制的对象，无需知晓如何创建的细节

3.工作原理: 通过将一个原型对象传给那个要发起创建的对象，这个要发起创建的对象通过请求原型对象来拷贝它们自己实现创建 对象.clone()

深拷贝和浅拷贝:
    1.浅拷贝
        1.对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性值复制一份给新的变量
        2.对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组，某个类的对象等，那么浅拷贝会进行引用传递，也就是将该成员变量的引用值(内存地址)复制一份给新的对象。
        （两个栈中存在的引用指向同一个堆中的实例）
        多个对象指向同一个实例，在这种情况下，一个对象去修改该成员变量会影响到另一个对象。

    2.浅拷贝的实现方法:
        sheep = (Sheep) super.clone();// 浅拷贝是使用默认的clone()实现

    3.深拷贝
        1.复制对象的所有基本数据类型的变量值（和浅拷贝一致）
        2.对象进行深拷贝就是不再增加原有对象的引用，而是在堆中重新开辟一块空间放置该对象实例的复制体

    4.深拷贝实现方法:
        1.重写clone()
        2.通过对象序列化实现深拷贝(oos,bos,bis,ois)

原型模式的注意事项和细节
    1.创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也可以提高效率
    2.不用重新初始化对象，而是动态地获得对象运行时的状态
    3.如果原始对象发生变化(增加或者减少属性)，其他克隆对象也会发生相应的变化，无需修改代码
    4.原型模式的缺点:
        需要为每一个类配备一个克隆方法，这对全新的类来说不是很难，但对已有的类进行改造时，需要修改源代码，违反了ocp(开放封闭原则)





