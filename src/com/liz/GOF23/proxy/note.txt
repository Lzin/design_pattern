代理模式（proxy）:
基本介绍:
    1.代理模式:为一个对象提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象。
      这样做的好处是:可以在目标对象实现的基础上，增强额外的功能操作（扩展目标对象的功能）
    2.被代理对象的对象可能是远程对象，创建开销大的对象或者是需要安全控制的对象
    3.代理模式有不同的形式，主要有 静态代理，动态代理（JDK代理，接口代理），Cglib代理(可以在内存中动态创建对象，而不需要实现接口，属于动态代理的范畴)

1.静态代理:静态代理在使用时，需要定义接口或者父类，被代理对象(目标对象)与代理对象一起实现相同的接口或者继承相同的父类
    注意: 代理对象与目标对象要实现相同的接口，然后通过调用相同的方法来调用目标对象的方法
    优点: 在不修改目标对象的功能前提下，能通过代理对象对目标对象进行扩展
    缺点: 因为代理对象需要和目标对象实现一样的接口，所以可能有多个代理类，同时如果接口更改的话，代理对象和目标对象都要更改

2.动态代理:
    1.代理对象不需要实现接口，但是目标对象需要实现接口，否则不能用动态代理
    2.代理对象的生成，是利用jdk的api，动态在内存中构建代理对象
    3.动态代理也称为: JDK代理，接口代理
    4.jdk中生成代理对象的api
        1.代理对象所在的包: java.lang.reflect.Proxy
        2.JDK实现代理只需要使用newProxyInstance方法即可    static Object newProxyInstance(ClassLoader loader,Class<?>[]interfaces,InvocationHandler h)

3.Cglib代理[基于拦截器设计]
    1、静态代理和JDK代理都要求目标对象实现一个接口，但是有时候目标对象如果没有实现任何的接口，这时候可以使用目标对象的子类实现代理(Cglib代理)【通过继承来代理】
    2、Cglib代理又称为子类代理，它是在内存中构建一个子类对象，从而实现对目标对象的功能拓展
    3、Cglib是一个强大的高性能代码生成包，它可以在运行期扩展java类与实现java接口，广泛被用于许多aop的框架使用，例如Spring AOP
    4、在AOP编程中如何选择代理模式？
        1.目标对象需要实现接口，使用JDK代理
        2.目标对象不需要实现接口，使用Cglib代理
    5、Cglib的底层是使用字节码处理框架ASM来转换字节码，并生成新的类（字节码动态生成对象）
    6、使用步骤:
        1.引入cglib.jar
        2.在内存中动态构建子类，注意代理的类不能为final，否则报错 java.lang.illegalArgumentException
        3.目标对象的方法如果为final/static,那么就不会被拦截，即不会执行目标对象额外的业务方法

4.代理模式的变体
    1.防火墙代理:内网通过代理穿过防火墙，实现对公网的访问
    2.缓存代理:当请求图片文件等资源时，先到缓存代理处取，如果取到资源就ok，没有取到再到公网或者数据库取，然后缓存
    3.远程代理: 远程对象的本地代表，通过它可以把远程对象当做本地对象调用，远程代理通过网络和真正的远程对象进行沟通信息(RPC)
    4.同步代理: 主要用在多线程编程中，完成多线程间同步工作





