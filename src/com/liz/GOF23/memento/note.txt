备忘录模式
1.需求: 游戏角色状态恢复问题
    游戏角色有攻击力和防御力，在大战boss前保存自己的状态(攻击力和防御力)【存档】,如果战斗失败之后进行读档（恢复当前状态）

2.解决方案;
    1.传统方案
        * 一个对象对应着一个保存对象的状态，这样当我们游戏的对象很多的时候，不利于管理
        * 传统方式就是重新new了一个对象，进行备份（将原数据搬移到新的对象中），但是会暴露对象内部的细节
        * 推荐使用备忘录模式
    2.采用备忘录模式

3.备忘录模式一览:
    1.备忘录模式（Memento Pattern）在不破坏封装性的前提下，捕获一个对象的内部状态，并且在对象之外保存这个状态。因为可以随时恢复
    2.备忘录模式主要用来记录一个对象的某种状态，或者某些数据，当要做回退的时候，可以从备忘录对象里获取原来的数据进行恢复操作
    3.备忘录模式是行为型模式
    4.备忘录模式中的角色:
        * originator:原始对象（需要保存状态的对象）
        * Memento: 备忘录对象（负责保存好记录，即Originator的内部状态）
        * Caretaker:负责保存多个备忘录对象，使用集合进行管理，提高效率
        * 如果希望保存多个originatro对象的不同时间的状态，只需要采用多个集合拓展（HashMap<String,T >）

4.备忘录模式细节:
    1.给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便恢复到某个状态
    2.实现信息的封装，用户不考虑细节
    3.如果类的成员变量过多，备份的时候会占用一定资源
    4.适用场景: 存档，数据库的事务管理等
    5.备忘录模式可以和原型模式(深浅拷贝)一起使用，便于节约资源..


