桥接模式:
 1.实例
    假设现在有一支画笔，可以用来画画，画正方形，长方形，三角形（基本的继承操作），但是现在需要给他们上色(需要上红色，绿色，蓝色)
    所以可以有两种解决方法:
        1.为三种不同的形状提供各个颜色的实例(提供九个实例)[红色正方形 红色长方形 红色三角形]
            优点: 简单容易操作
            缺点: 如果需要再加一个形状，就要多实现三个实例;如果需要再加一个颜色，就需要加更多实例了（麻烦）

        2.使用桥接模式
            1. 提供两个抽象模型，一个是颜色(Color)，一个是形状(Shape)，然后对颜色和形状进行随机组合
            2. 桥接模式适用于多个变化维度时

  2.桥接模式介绍:
        1. 桥接模式即将抽象部分与它的实现部分分离开来，使他们都可以独立变化
        2. 桥接模式将继承关系转化成关联关系，它降低了类与类之间的耦合度，减少了系统中类的数量，也减少了代码量
        3. 将抽象化和实现化之间采用关联关系(组合或者聚合)和部分继承关系，从而使得两者可以相对独立地变化
            注: 聚合: 聚合是整体与部分的关系, 并且部分可以离开整体而单独存在(has a)。(大雁和雁群 水果和果篮)
                组合: 组合是整体与部分的关系, 并且部分不可以离开整体而单独存在(part of)。（头和人）
        4. 桥接模式可以实现两个抽象层实现关联关系


  3.桥接模式主要分为几个角色:
       1. Abstraction：抽象类。
       2. RefinedAbstraction：扩充抽象类。
       3. Implementor：实现类接口。
       4. ConcreteImplementor：具体实现类 。

  4.桥接模式的优点:
    1. 分离抽象,接口及其实现部分。体现了比继承更好的解决方案。
    2. 桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。
    3. 实现细节对客户透明，可以对用户隐藏实现细节。

  5.缺点:
    1. 桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。
    2. 桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性。

  6.使用场景:
    1. 如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系
    2. 对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。
    3. 一个类存在两个独立变化的维度，且这两个维度都需要进行扩展

  7.总结:
    桥接模式实现了抽象化与实现化的解耦。他们两个互相独立，不会影响到对方。
    对于两个独立变化的维度，可以使用桥接模式，而且不会影响到用户



