职责链模式:
1.需求: OA系统的采购审批
    1.采购员进行采购器材:
        金额 <= 5000  由教学主任审批      (0 <= x <= 5000)
        金额 <= 10000 由院长审批         (5000 < x <=10000)
        金额 <= 30000 由副校长审批       (10000 < x <= 30000)
        金额 >30000   由校长审批         (x > 30000)

2.解决方案:
    1.传统方式
        * 传统方式是接收到一个采购请求后，根据采购的金额来调用对应的Approver(审批人)进行审批
        * 问题分析: 使用过多的if else 或者 switch进行处理，客户端必须明确知晓有多少个审批级别和访问，如果审批金额发生变化，客户端也要变化
        * 导致了请求和Approver(审批人)之间存在强耦合关系，不利于代码的扩展和维护

    2.解决思路: 职责链模式

3.职责链模式介绍:
    1.职责链模式(Chain of Responsibility Pattern) 又称为责任链模式，为请求创建了一个接收者对象的链（从而对发送者和接收者之间进行解耦）
    2.职责链模式通常通过每个接收者包括对另一个接收者的引用，如果一个对象不能处理该请求，那么它会把相同的请求给下一个接收者
    3.这种类型的设计模式为行为型模式
    4.职责链模式的角色;
        1.Handler: 抽象的处理者，定义了一个处理请求的方法，含有另外一个handler
        2.ConcreteHandler 是具体的处理者，处理自己负责的请求，可以访问它的后继者(即下一个处理者)，如果可以处理当前请求就自己处理，否则就将该请求交给后继者去处理，从而形成了一个职责链
        3.request : 含有很多属性，表示一个请求

4.职责链模式的细节
    1.将请求和处理分开，实现解耦，提高了灵活性
    2.简化了链的结构，对象无需知晓链的结构

    3.但是性能会受到影响，尤其是在链过长的时候，所以要控制链中最大节点的数量，一般在Handler中设置
    4.调试会不方便，采用了类似递归的方式，逻辑较为复杂

    使用场景: 有多个对象处理同一个请求时，比如: 多级请求，审批流程，springmvc中的拦截器（HandlerExecutionChain中注册了多个拦截器）