组合模式:
1. 需求:
     编写程序展示一个学校院系结构: 需求是这样的，要在一个页面中展示出学校的院系组成，一个学校中有多个学院，一个学院中有多个系。（包含关系）
         ---------江西农业大学-------
         ---------软件学院------------
         物联网工程
         软件+英语
         软件+金融
         ---------经管学院-----------
         农林经济管理
         会计
         市场营销

2.解决方案:
    * 传统方案
      系 -> 学院 -> 学校 准确的关系应该是一种组合的关系而不是继承
    1. 将学院看作是学校的子类，系看作是学院的子类（继承关系）
    2. 实际上我们的要求是: 体现出学校的院系组成，一个学校有多个学院，一个学院有多个系。因此这种方案不能很好实现管理操作。比如对学院，系的添加，删除，遍历等
    3. 解决方案:
        把学校，院和系都看作组织结构，他们之间没有继承关系，而是一种树形结构，可以更好地实现管理操作(组合模式)【相当于上下级组织 而不是父亲儿子的继承关系】

3.组合模式的介绍
    1.组合模式(Composite Pattern),又称为部分整体模式，它创建了对象组的树形结构，将对象组合成树形结构以表示"整体-部分"的层次关系
    2.组合模式依据树形结构来组合对象，用来表示 部分和整体的层次关系
    3.组合模式属于结构型模式
    4.组合模式让对象对单个对象和组合对象的访问具有一致性，即: 组合能让客户以一致的方式处理个别对象以及组合对象
    5.组合模式用来解决的问题:
        1.当我们要处理的对象可以生成一棵树型结构（参考二叉树），而我们要对树上的节点和叶子进行操作时，它能够提供一致的方式，而不用考虑是节点还是叶子（使用了多态）
    6.角色:
         * Component:它是一个抽象角色，为要组合的对象提供统一的接口。
         * Leaf:在组合中表示子节点对象，叶子节点不能有子节点。
         * Composite:定义有枝节点的行为，用来存储部件，实现在Component接口中的有关操作
    7.细节:
        1. 简化客户端操作，客户端只需要面对一致的对象而不用考虑整体部分或者节点叶子的问题
        2. 组合模式有较强的扩展性，当需要更改组合对象时，我们只需要调整内部的层次关系，客户端无需改动
        3. 方便创建出复杂的层次结构，客户端无需理会内部的组成细节。容易添加节点或者叶子从而创建出复杂的树形结构
        4. 方便创建出复杂的树形结构
        5. 要求较高的抽象性，如果节点和叶子有很多的差异。不适合用组合模式i

4.jdk中的组合模式
    4-1: Map就是一个抽象的构建(类似于我们的Component)
    4-2: AbstractMap: component的缓冲层
    4-3: HashMap: 是一个中间的构建(Composite),实现/继承了相关方法(pull,putall)
    4-4: Node: HashMap的静态内部类。类似于Leaf叶子节点


