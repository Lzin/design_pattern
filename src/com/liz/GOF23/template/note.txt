模板方法模式（template_method_pattern）
1.需求:豆浆制作的问题
    1.制作豆浆的流程: 选材 -> 添加配料 -> 浸泡 -> 放到豆浆机里打碎
    2.通过添加不同的配料，可以制作出不同口味的豆浆

2.模板方法模式基本介绍:
    1.模板方法模式（Template Method Pattern)又称为模板模式(Template Pattern)，在一个抽象类中公开定义了执行方法的模板。
      它的子类可以按照需要去重写方法实现。调用的顺序和抽象类中一致
    2.模板方法模式就像是一个算法的骨架，定义一个抽象的执行结构。
    3.这种类型的设计模式属于行为性的模式。
    4.模板方法中的角色:
        1.AbstractClass: 抽象类，内部有一个模板方法（template）,规定了算法大致的流程（算法骨架）
        2.ConcreteClass: 子类，内部重新实现抽象方法。不一样的子类可以实现不一样的方法
    5.什么是钩子方法:
        * 在模板方法模式的父类中，我们可以定义一个方法，它默认不做任何事，子类可以视情况要不要去覆盖它。该方法称为"钩子"。
        * 加入想制作纯豆浆，如何修改？（不添加任何配料） =>设置一个钩子函数用来进行add方法的条件性开闭（是否调用）

3.模板方法的细节:
    1.一般模板方法都加上final关键字，防止子类重写模板方法
    2.模板方法的使用场景:
        当完成某个过程时，该过程需要执行一系列步骤（一系列步骤基本相同），但是个别步骤在实现的时候可能细节不同时，可以采用模板方法(+钩子函数)来处理
    3.模板方式的优缺点:
        优点:
            * 封装不变部分，扩展可变部分
            * 提取公共代码，便于维护
            * 行为由父类控制，子类实现，符合开闭原则
            * 代码复用，减少代码冗余

        缺点:
            * 每一个不同的实现都要加上一个子类
            * 由于继承的关系，父类增加或者修改方法时，子类都需要实现。




