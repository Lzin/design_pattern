状态模式
1.需求: APP抽奖问题
    * 假如每参加一次活动要扣除50积分，中奖的概率为百分之10
    * 奖品的数量固定，抽完就不能抽奖
    * 活动存在四个状态: 不能抽奖,可以抽奖，发放奖品，奖品领完

2.状态模式简单介绍:
    1.状态模式（State Pattern）:主要用于解决对象在多种状态转换的时候，需要对外输出不同的行为的问题，状态和行为是一一对应的，状态之间可以相互转换
    2.当一个对象的内在状态改变时，允许改变其行为，好像改变了这个对象的类
    3.状态模式中的角色和职责
        1.Context类为环境角色，用于维护State实例，这个实例定义了当前的状态
        2.State是一个抽象的状态角色（接口），定义一个接口封装与Context的一个特定接口相关行为
        3.ConcreteState 具体的状态角色，每个子类实现一个与Context的一个状态相关行为
3.状态模式的细节
    1.如果状态进行频繁变化，首先画出流程图，然后根据流程图分析状态，设计不同的状态接口解答
    2.状态模式使得代码有很强的可读性，状态模式将每个状态的行为封装到对应的类中
    3.方便维护，将if-else摒弃
    4.符合开闭原则，容易增删状态

    5.状态模式会产生很多类，因为每一个状态都要对应一个类，当状态过多的时候就会产生很多类，加大维护难度
    6.当一个事件或者对象有着很多种状态，状态之间会进行转换，当不同的状态有不同行为的时候考虑使用状态模式。

