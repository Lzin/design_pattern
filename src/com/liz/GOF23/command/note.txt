命令模式:
    1.需求:买了一套智能家电(如:照明灯,风扇,冰箱，洗衣机),但是不想每个家电都用一个对应的app去控制，想做到使用同一个app控制所有家电

    2.分析需求:
        如果要实现一个app控制所有家电，则每个家电都要提供一个统一的接口给app调用，可以考虑命令模式解决（命令模式可以将“动作的请求者”从动作执行者中解耦出来）
        动作的请求者就是"手机"，动作的执行者就是每个厂商对应的"家电产品"。

    3.命令模式的基本介绍:
        1.命令模式(Command Pattern)，在软件设计中，我们经常要向某些对象发送请求，但是不知道请求的接收者是谁，也不知道被请求的操作是什么。
        2.只需要在程序中指定请求接收者即可，此时，可以使用命令模式来进行设计
        3.命令模式使得请求发送者和请求接收者之间消除彼此的耦合，让对象之间的调用关系变得灵活，实现解耦
        4.请求模式中会将请求封装为一个对象，以便于使用不同参数表达不同的请求，同时命令模式支持可撤销的操作
        5.命令模式的角色:
           抽象命令类（Command）角色： 声明执行命令的接口，拥有执行命令的抽象方法 execute()。
           具体命令角色（Concrete Command）角色： 是抽象命令类的具体实现类，它拥有接收者对象，并通过调用接收者的功能来完成命令要执行的操作。
           实现者/接收者（Receiver）角色： 执行命令功能的相关操作，是具体命令对象业务的真正实现者。
           调用者/请求者（Invoker）角色： 是请求的发送者，它通常拥有很多的命令对象，并通过访问命令对象来执行相关请求，它不直接访问接收者。

    4.命令模式的细节:
        1.将发起请求的对象和执行请求的对象进行解耦，发起请求的对象是调用者，调用者只要调用命令对象的方法就可以让接收者进行工作，但是并不需要知道具体的接收者是谁，命令对象负责让接收者进行执行请求的动作。
        2.“请求发起者”和"请求执行者" 之间的解耦是由命令对象实现的，起到了纽带的作用
        3.命令模式很容易实现对请求的撤销(!!!!)
        4.命令对象的优缺点;
            1.优点: 实现低耦合，新的命令可以很容易添加到系统中去。
            2.缺点: 可能导致某些系统有着过多的命令类，增加系统的复杂度。

        5.使用环境:
            设置界面按钮和命令，模拟CMD(dos命令)订单的撤销/恢复，触发/反馈机制


