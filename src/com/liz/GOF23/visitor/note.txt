访问者模式:
    1.需求: 实现测评系统
        * 将观众分为男人和女人，对歌手进行测评，当看完某个歌手表演之后，得到他们对该歌手不同的评价

    2.解决方案:
        * 使用Person抽象类，然后将男人和女人进行继承抽象类: 在具体的类下进行操作
            1.如果系统比较小，这种方法可以，但是考虑系统增加越来越多新的功能时，对代码改动较大，违反了OCP原则，不利于维护
            2.代码的扩展性不好，如果想增加新的人员类型或者管理方法，较难实现
        * 所以使用访问者设计模式进行优化

    3.访问者模式的基本介绍:
        1.访问者模式（Visitor Pattern）,封装一些作用于某种数据结构的各元素的操作，可以在不改变数据结构的前提下定义新的操作(作用域这些元素)
        2.主要将数据结构和数据操作进行分离，解决了 数据结构 和 操作耦合性 的问题
        3.访问者模式的基本工作原理是: 在被访问的类里提供一个对外接待访问者的接口
            accept(Visitor visitor)

    4.访问者模式中的角色:
         . Visitor 抽象访问者，为该对象结构中的ConcreteElement的每一个类声明一个访问操作
         . ConcreteVisitor 具体的访问者，实现每个有Visitor声明的操作
         . Element: 定义了一个accept操作，可以接受访问者对象
         . ConcreteElement: 实现accept方法
         . ObjectStructure 能枚举元素（内部包含多个元素），可以提供高层接口，用来允许访问者访问元素


    5.访问者模式的主要应用场景: 需要对一个具体结构的对象进行很多不同的操作（这些操作彼此之间没有关联),同时需要避免让这些操作影响对象的类。可以采用访问者模式解决

    6.访问者模式的优点和缺点:
        访问者（Visitor）模式是一种对象行为型模式，其主要优点如下。
        扩展性好。能够在不修改对象结构中的元素的情况下，为对象结构中的元素添加新的功能。
        复用性好。可以通过访问者来定义整个对象结构通用的功能，从而提高系统的复用程度。
        灵活性好。访问者模式将数据结构与作用于结构上的操作解耦，使得操作集合可相对自由地演化而不影响系统的数据结构。
        符合单一职责原则。访问者模式把相关的行为封装在一起，构成一个访问者，使每一个访问者的功能都比较单一。

        访问者（Visitor）模式的主要缺点如下。
        增加新的元素类很困难。在访问者模式中，每增加一个新的元素类，都要在每一个具体访问者类中增加相应的具体操作，这违背了“开闭原则”。
        破坏封装。访问者模式中具体元素对访问者公布细节，这破坏了对象的封装性。
        违反了依赖倒置原则。访问者模式依赖了具体类，而没有依赖抽象类。




