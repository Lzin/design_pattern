//讲道理 不太懂
解释器模式（Interpreter Pattern）
1.需求:完成四则运算问题（a + b - c）
具体要求:
    1.先输入表达式，比如a+b+c-d+e,要求表达式的字母不能重复
    2.分别输入a,b,c,d,e的值
    3.最后求出结果

2.方案
    1.编写方法接收表达式，根据用户输入的数值进行解析，得到结果
    2.分析: 如果加入新的运算符，比如说/ * 等不利于扩展，同时使用同一个方法进行解析的话，造成结构混乱
    3.解决方案: 考虑使用解释器模式，即: 表达式 -> 解释器（可以有多种） -> 结果

3.解释器模式的基本介绍
    1.解释器模式（Interpreter Pattern）是指给定一个语言（表达式），定义它的文法的一种表示，并定义一个解释器，使用该解释器来解释语言中的句子（表达式）
    2.应用场景
        * 应用可以将一个需要解释执行的语言中的句子表示为一个抽象语法树
        * 一些重复出现的问题可以用一种简单的语言表达
        * 一个简单语法需要解释的场景
    3.这种例子还有: 编译器，运算表达式计算，正则表达式，机器人等。
    4.解释器模式中的角色:
        AbstractExpression:抽象解释器,声明一个抽象的解释操作，这个方法为抽象语法树中所有的节点（子类）所共享
        TerminalExpression:终结符表达式,实现与文法中的终结符相关的解释操作
        NonTerminalExpression:非终结符表达式，实现与文法中的非终结符相关的解释操作
        Context: 环境角色，含有解释器之外的一些全局信息
        Client:调用者,通过Client输入Context和xxxExpression
优点：
1.可扩展性比较好，灵活；
2.增加新的解释表达式不需改动原有的代码，符合开闭原则；
3.易于实现简单文法。

缺点：
1.当语法规则数目太多时，增加了系统的复杂度；
2.解释器模式采用递归调用方法，执行效率低，调试困难；
3.对于复杂的文法比较难维护；
4.解释器模式会引起类膨胀。







