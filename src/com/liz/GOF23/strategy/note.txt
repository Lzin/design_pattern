策略模式
1.需求: 解决鸭子问题
    1.有各种鸭子（比如说: 野鸭，水鸭..，鸭子有各种行为，比如说叫，飞行等）
    2.显示鸭子的信息

2.传统解决方案:
    1.传统方案设计了一个抽象类Duck，所有的子类继承该类
    2.但是其他鸭子有些不具备当前功能，所以这其实是继承带来的问题。对类的局部改动，尤其是超类的局部改动，会影响其他地方
    3.为了解决问题，我们使用了重覆盖方法（参考玩具鸭）
    4.改进方案: 策略模式 => 将继承换成组合或者聚合

3.策略模式
    1.策略模式(Strategy Pattern)中，定义算法族，分别封装起来，让他们之间可以进行相互替换，此模式让算法的变化独立于使用算法的客户
    2.使用的设计原则:
        1.把变化的代码从不变的代码中进行分离
        2.针对接口进行编程而不是类（定义策略接口）
        3.多使用组合和聚合，少使用继承
            组合: 通过构造器new实例
            聚合: setXxx 中new实例
        4.注:1.桥接是属性在变 策略是行为在变
             2.同一组对象的不同方法进行分类
             3.将使用者和提供者进行解耦

4.策略模式的关键和细节
    1.策略模式的关键是分析项目中变化和不变的部分
    2.策略模式核心思想是: 多使用组合聚合，少用继承，使用行为类之间的组合更有弹性
    3.策略模式体现了“对修改关闭，对扩展行为开放”
    4.将使用者和提供者进行分离
    5.每增加一个策略就要增加一个类，当策略过多的时候导致类的数目过大。